Will require the following separate responsibilities to be carried out:

 * hosting a HTTP server to handle requests (express)
 * retrieving data from XML feed (request)
 * converting XML data to JSON (xmltojs)
 * formatting & manipulating flight data into desired format
 * returning content in supported format [see jsonapi.org]
 * caching data against etag to prevent unnecessary data exchange (memory-cache)

REST URIs:

URI format will be prefixed with the version i.e. ~/v1/

Flights
-------

Arrivals: GET ~/v1/flights/arrivals
Departures: GET ~/v1/flights/departures

Optional query parameters:

airline.code - filter on the airline i.e. BE
airport.name - filter on the airport the flight is traveling to/from i.e. Manchester

Unfortunately the status provided is just a free string i.e. 'Go To Departures' rather than structured so makes
it tricky to add status filtering but I may see if doing some regexes might yield some results.

The times supplied are local UK time and not UTC, if the island starts having regular flights from other
timezones this could be an issue.

You can use the Last-Modified header to determine when the data was last updated.

JSON Response:

{
  "flights": [{
    "id": "BE195",
    "type": "flight",
    "airport": {
      "name": "Birmingham",
      "fullname": "Birmingham"
    },
    "airline": {
      "code": "BE",
      "name": "Flybe"
    },
    "scheduled": "2014-11-08T12:20",
    "expected": "2014-11-08T12:40",
    "actual": "2014-11-08T12:30",
    "status": "Boarding Gate 4"
  }]
}

If the client is not using caching request headers when making the request, the response will include meta
information to inform the client to use them to reduce data traffic:

{
  "meta": {
    "caching": "~/v1/caching"
  }
}

GET ~/v1/caching

The IOM Flights API supports using the If-None-Match & If-Modified-Since caching request headers, by using these
headers you can reduce traffic being sent unnecessarily when data has not changed.
