Will require the following separate responsibilities to be carried out:

 * hosting a HTTP server to handle requests (express)
 * retrieving data from XML feed (request)
 * converting XML data to JSON (xml2js)
 * formatting & manipulating flight data into desired format
 * returning content in supported format [see jsonapi.org]
 * caching data against etag to prevent unnecessary data exchange (memory-cache)

REST URIs:

URI format will be prefixed with the version i.e. ~/v1/

Flights
-------

Arrivals: GET ~/v1/flights/arrivals
Departures: GET ~/v1/flights/departures

Optional query parameters:

airline.code - filter on the airline i.e. BE
airport.name - filter on the airport the flight is traveling to/from i.e. Manchester

Unfortunately the status provided is just a free string i.e. 'Go To Departures' rather than structured so makes
it tricky to add status filtering but I may see if doing some regexes might yield some results.

Occasionally there are flights to/from countries that cross timezones therefore I have included both the local
time and also the converted UTC time if needed.

JSON Response:

{
  "updated": 2014-12-17T18:58:00.000Z",
  "flights": [{
    "id": "BE195",
    "type": "flight",
    "airport": {
      "name": "Birmingham",
      "fullname": "Birmingham"
    },
    "airline": {
      "code": "BE",
      "name": "Flybe"
    },
    "scheduled": {
      "local": "2014-11-08T12:20",
      "utc": "2014-11-08T12:20Z"
    },
    "expected": {
      "local": "2014-11-08T12:40",
      "utc": "2014-11-08T12:40Z"
    },
    "actual": {
      "local": "2014-11-08T12:30",
      "utc": "2014-11-08T12:30Z"
    },
    "status": "Boarding Gate 4"
  }]
}

If the client is not using caching request headers when making the request, the response will include meta
information to inform the client to use them to reduce data traffic:

{
  "meta": {
    "caching": "~/v1/caching"
  }
}

GET ~/v1/caching

The IOM Flights API supports using the If-None-Match & If-Modified-Since caching request headers, by using these
headers you can reduce traffic being sent unnecessarily when data has not changed.
